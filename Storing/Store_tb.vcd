$date
	Sat May 11 05:08:07 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module store_tb $end
$var reg 32 ! Read_register1 [31:0] $end
$var reg 32 " Read_register2 [31:0] $end
$var reg 1 # clk $end
$var reg 16 $ instruction [15:0] $end
$var reg 1 % reset $end
$var reg 1 & write_enable $end
$scope module dut $end
$var wire 32 ' Read_register1 [31:0] $end
$var wire 32 ( Read_register2 [31:0] $end
$var wire 1 # clk $end
$var wire 16 ) instruction [15:0] $end
$var wire 1 % reset $end
$var wire 1 & write_enable $end
$var wire 32 * Sign_extended [31:0] $end
$var wire 32 + Read_data2 [31:0] $end
$var wire 32 , Read_data1 [31:0] $end
$var wire 1 - ALU_zero $end
$var wire 32 . ALU_output [31:0] $end
$scope module MEM $end
$var wire 1 # clk $end
$var wire 1 & write_enable $end
$var wire 32 / write_data [31:0] $end
$var wire 32 0 address [31:0] $end
$var reg 32 1 mem_read_data [31:0] $end
$upscope $end
$scope module RF $end
$var wire 32 2 Read_register1 [31:0] $end
$var wire 32 3 Read_register2 [31:0] $end
$var wire 1 # clk $end
$var wire 1 % reset $end
$var reg 32 4 Read_data1 [31:0] $end
$var reg 32 5 Read_data2 [31:0] $end
$upscope $end
$scope module SE $end
$var wire 16 6 in [15:0] $end
$var wire 32 7 out [31:0] $end
$upscope $end
$scope module alu $end
$var wire 32 8 a [31:0] $end
$var wire 3 9 alu_control [2:0] $end
$var wire 32 : b [31:0] $end
$var wire 1 - zero $end
$var reg 32 ; result [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx ;
b0 :
b10 9
bx 8
b0 7
b0 6
bx 5
bx 4
b0 3
b0 2
bx 1
bx 0
bx /
bx .
x-
bx ,
bx +
b0 *
b0 )
b0 (
b0 '
0&
1%
b0 $
0#
b0 "
b0 !
$end
#10
1-
b0 .
b0 0
b0 ;
b0 +
b0 /
b0 5
b0 ,
b0 4
b0 8
0%
1#
#20
0#
#30
b10111011101110111011101110111011 +
b10111011101110111011101110111011 /
b10111011101110111011101110111011 5
0-
b11111111111111111010101010101010 .
b11111111111111111010101010101010 0
b11111111111111111010101010101010 ;
1#
b1011 "
b1011 (
b1011 3
b11111111111111111010101010101010 *
b11111111111111111010101010101010 7
b11111111111111111010101010101010 :
b1010101010101010 $
b1010101010101010 )
b1010101010101010 6
#40
0#
#50
1#
#60
0#
1&
#70
1#
#80
0#
#90
b100010001000100010001000100010 +
b100010001000100010001000100010 /
b100010001000100010001000100010 5
b110011001100110011001100110011 ,
b110011001100110011001100110011 4
b110011001100110011001100110011 8
b110011001100101111111111111111 .
b110011001100101111111111111111 0
b110011001100101111111111111111 ;
1#
b10001 "
b10001 (
b10001 3
b11 !
b11 '
b11 2
b11111111111111111100110011001100 *
b11111111111111111100110011001100 7
b11111111111111111100110011001100 :
b1100110011001100 $
b1100110011001100 )
b1100110011001100 6
0&
#100
0#
#110
1#
#120
0#
1&
#130
1#
#140
0#
#150
1#
