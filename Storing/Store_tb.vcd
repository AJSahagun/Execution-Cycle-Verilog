$date
	Thu May 09 01:13:30 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module store_tb $end
$var wire 1 ! write_enable $end
$var wire 32 " write_data [31:0] $end
$var wire 32 # address [31:0] $end
$var reg 32 $ Read_data1 [31:0] $end
$var reg 32 % Read_data2 [31:0] $end
$var reg 1 & clk $end
$var reg 32 ' instruction [31:0] $end
$var reg 1 ( reset $end
$scope module DUT $end
$var wire 32 ) Read_data1 [31:0] $end
$var wire 32 * Read_data2 [31:0] $end
$var wire 1 & clk $end
$var wire 32 + instruction [31:0] $end
$var wire 1 ( reset $end
$var wire 32 , Sign_extended [31:0] $end
$var wire 1 - ALU_zero $end
$var wire 32 . ALU_output [31:0] $end
$var reg 32 / address [31:0] $end
$var reg 32 0 write_data [31:0] $end
$var reg 1 ! write_enable $end
$scope module SE $end
$var wire 16 1 in [15:0] $end
$var wire 32 2 out [31:0] $end
$upscope $end
$scope module alu $end
$var wire 32 3 a [31:0] $end
$var wire 3 4 alu_control [2:0] $end
$var wire 32 5 b [31:0] $end
$var wire 1 - zero $end
$var reg 32 6 result [31:0] $end
$upscope $end
$scope module registerfile $end
$var wire 32 7 Read_data2 [31:0] $end
$var wire 5 8 Read_register1 [4:0] $end
$var wire 5 9 Read_register2 [4:0] $end
$var wire 1 : RegWrite $end
$var wire 32 ; Write_data [31:0] $end
$var wire 5 < Write_register [4:0] $end
$var wire 1 = clk $end
$var wire 1 > reset $end
$var wire 32 ? Read_data1 [31:0] $end
$var integer 32 @ i [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#10
$dumpvars
bx @
bx ?
z>
z=
bz <
bz ;
z:
bz 9
bz 8
bx 7
bx 6
bx 5
b10 4
bx 3
bx 2
bx 1
bx 0
bx /
bx .
x-
bx ,
bx +
bx *
bx )
1(
bx '
0&
bx %
bx $
bx #
bx "
x!
$end
#15
1&
#20
1!
b100 #
b100 /
0-
b100 .
b100 6
b100 ,
b100 2
b100 5
b100 1
0&
b10010001101000101011001111000 %
b0 $
b0 )
b0 3
b10101100100010010000000000000100 '
b10101100100010010000000000000100 +
#25
1&
#30
b111100 #
b111100 /
b111100 .
b111100 6
b100000 ,
b100000 2
b100000 5
b100000 1
0&
b10101011110011011110111100000001 %
b11100 $
b11100 )
b11100 3
b10101100100010100000000000100000 '
b10101100100010100000000000100000 +
#35
1&
#40
0&
#45
1&
#50
0&
